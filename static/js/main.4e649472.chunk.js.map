{"version":3,"sources":["memeComponents/Header.js","memeComponents/MemeDisplay.js","memeComponents/ErrorBoundary.js","memeComponents/MemeGenerator.js","memeComponents/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","class","src","alt","width","height","MemeDisplay","props","id","data","randomImg","topText","bottomText","authorText","length","Fragment","type","name","onClick","handleRandom","onChange","handleUpload","aria-describedby","accept","for","placeholder","value","handleChange","role","aria-label","s","handlePng","handleJpeg","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","errorInfo","setState","children","React","Component","MemeGenerator","event","_event$target","target","defineProperty","preventDefault","files","uploadFile","URL","createObjectURL","randNum","Math","floor","random","allMemeImgs","randMemeImg","url","htmlToImage","toPng","document","getElementById","then","dataUrl","download","toJpeg","quality","link","href","click","_this2","fetch","response","json","memes","memeComponents_ErrorBoundary","memeComponents_MemeDisplay","Footer","App","memeComponents_Header","memeComponents_MemeGenerator","memeComponents_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0MAiBeA,MAff,WACE,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEfH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,wBACbJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,kBAAkBC,IAAI,iEAAiEC,IAAI,GAAGC,MAAM,KAAKC,OAAO,OAC3HR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,cACAH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,QAAT,6ECqHWK,MA7Hf,SAAqBC,GACnB,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACfH,EAAAC,EAAAC,cAAA,OAAKS,GAAG,UAAUR,UAAU,eAChBH,EAAAC,EAAAC,cAAA,OACEG,IAAKK,EAAME,KAAKC,UAChBV,UAAU,0BACVG,IAAI,GAAGC,MAAM,SAEfP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWO,EAAME,KAAKE,SACpCd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcO,EAAME,KAAKG,YACvCf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cACVO,EAAME,KAAKI,WAAWC,OAAS,GAC9BjB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiB,SAAA,WAAMR,EAAME,KAAKI,WAAjB,QAMdhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACfH,EAAAC,EAAAC,cAAA,YACUF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,aACAH,EAAAC,EAAAC,cAAA,UACEiB,KAAK,SACLC,KAAK,gBACLC,QAASX,EAAMY,aACflB,MAAM,iCAEL,6BAEHJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,MACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SACEqB,SAAUb,EAAMc,aAChBL,KAAK,OACLhB,UAAU,oBACVQ,GAAG,mBACHc,mBAAiB,wBACjBC,OAAO,qCAET1B,EAAAC,EAAAC,cAAA,SACEC,UAAU,gCACVwB,IAAI,oBAFN,yBAUN3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,eACAH,EAAAC,EAAAC,cAAA,SACEC,UAAU,gCACVgB,KAAK,OACLC,KAAK,UACLQ,YAAY,aACZC,MAAOnB,EAAME,KAAKE,QAClBS,SAAUb,EAAMoB,eAElB9B,EAAAC,EAAAC,cAAA,SACEC,UAAU,2BACVgB,KAAK,OACLC,KAAK,aACLQ,YAAY,gBACZC,MAAOnB,EAAME,KAAKG,WAClBQ,SAAUb,EAAMoB,gBAIpB9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,cACAH,EAAAC,EAAAC,cAAA,SACEC,UAAU,2BACVgB,KAAK,OACLC,KAAK,aACLQ,YAAY,cACZC,MAAOnB,EAAME,KAAKI,WAClBO,SAAUb,EAAMoB,gBAIpB9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,0BACV4B,KAAK,QACLC,aAAW,iBAEXhC,EAAAC,EAAAC,cAAA,UACEiB,KAAK,SACLc,GAAC,EACD9B,UAAU,uBACVkB,QAASX,EAAMwB,WAJjB,gBAQAlC,EAAAC,EAAAC,cAAA,UACEiB,KAAK,SACLhB,UAAU,uBACVkB,QAASX,EAAMyB,YAHjB,4DC1EPC,cA9Bb,SAAAA,EAAY1B,GAAO,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM9B,KACDkC,MAAQ,CAAEC,UAAU,GAFRR,iFAUDS,EAAOC,GAOvB,OALAP,KAAKQ,SAAS,CACZF,MAAOA,EACPC,UAAWA,IAGN/C,EAAAC,EAAAC,cAAA,oEAIP,OAAIsC,KAAKI,MAAMC,SAEN7C,EAAAC,EAAAC,cAAA,mCAGFsC,KAAK9B,MAAMuC,4DArBYH,GAE9B,MAAO,CAAED,UAAU,UARKK,IAAMC,WCqFnBC,cAhFb,SAAAA,EAAY1C,GAAO,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAY,IACjBf,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAc,GAAAT,KAAAH,KAAM9B,KAmBRoB,aAAe,SAAAuB,GAAS,IAAAC,EACED,EAAME,OAAtBnC,EADckC,EACdlC,KAAMS,EADQyB,EACRzB,MACdQ,EAAKW,SAALV,OAAAkB,EAAA,EAAAlB,CAAA,GAAiBlB,EAAOS,KAtBPQ,EA0BnBb,aAAe,SAAA6B,GACbA,EAAMI,iBADgB,IAEdC,EAAUL,EAAME,OAAhBG,MACFC,EAAaC,IAAIC,gBAAgBH,EAAM,IAC7CrB,EAAKW,SAAS,CACZnC,UAAW8C,KA/BItB,EAoCnBf,aAAe,SAAA+B,GACbA,EAAMI,iBACN,IAAMK,EAAUC,KAAKC,MAAMD,KAAKE,SAAW5B,EAAKO,MAAMsB,YAAYjD,QAC5DkD,EAAc9B,EAAKO,MAAMsB,YAAYJ,GAASM,IACpD/B,EAAKW,SAAS,CAAEnC,UAAWsD,KAxCV9B,EA4CnBH,UAAY,WACVmC,IACGC,MAAMC,SAASC,eAAe,YAC9BC,KAAK,SAASC,GACbC,IAASD,EAAS,kBAhDLrC,EAqDnBF,WAAa,WACXkC,IACGO,OAAOL,SAASC,eAAe,WAAY,CAAEK,QAAS,MACtDJ,KAAK,SAASC,GACb,IAAII,EAAOP,SAASrE,cAAc,KAClC4E,EAAKH,SAAW,eAChBG,EAAKC,KAAOL,EACZI,EAAKE,WA1DT3C,EAAKO,MAAQ,CACX9B,QAAS,GACTC,WAAY,GACZC,WAAY,GACZH,UAAW,kCACXqD,YAAa,IAPE7B,mFAWC,IAAA4C,EAAAzC,KAClB0C,MAAM,qCACHT,KAAK,SAAAU,GAAQ,OAAIA,EAASC,SAC1BX,KAAK,SAAAU,GAAY,IACRE,EAAUF,EAASvE,KAAnByE,MACRJ,EAAKjC,SAAS,CAAEkB,YAAamB,uCAiDjC,OACErF,EAAAC,EAAAC,cAACoF,EAAD,KACEtF,EAAAC,EAAAC,cAACqF,EAAD,CACEzD,aAAcU,KAAKV,aACnBR,aAAckB,KAAKlB,aACnBY,UAAWM,KAAKN,UAChBC,WAAYK,KAAKL,WACjBX,aAAcgB,KAAKhB,aACnBZ,KAAM4B,KAAKI,gBA1EOM,IAAMC,WCSnBqC,MAbf,WACE,OAEExF,EAAAC,EAAAC,cAAA,cACFF,EAAAC,EAAAC,cAAA,OAAKE,MAAM,qCAAX,uBACEJ,EAAAC,EAAAC,cAAA,KAAG6E,KAAK,wBAAR,oBCQWU,MAVf,WACE,OACEzF,EAAAC,EAAAC,cAACF,EAAAC,EAAMiB,SAAP,KACElB,EAAAC,EAAAC,cAACwF,EAAD,MACA1F,EAAAC,EAAAC,cAACyF,EAAD,MACA3F,EAAAC,EAAAC,cAAC0F,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOnG,EAAAC,EAAAC,cAACkG,EAAD,MAAS7B,SAASC,eAAe,SDyH3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.4e649472.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <div className=\"container\">\r\n\r\n      <div class=\"col py-2 text-center\">\r\n    <img class=\"d-block mx-auto\" src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"\" width=\"50\" height=\"50\" /> \r\n    <h2 className=\"text-info\">Meme Maker</h2>\r\n    <p class=\"lead\">Making the World lol again</p>\r\n  </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction MemeDisplay(props) {\r\n  return (\r\n    <div className=\"jumbotron bg-info\">\r\n      <div className=\"container\">\r\n        <div className=\"row \">\r\n\r\n        <div className=\"col-md-12\">\r\n      <div className=\"row border overflow-hidden mb-4\">\r\n      <div className=\"col-lg-8 p-2 d-lg-block\">\r\n      <div id=\"my-meme\" className=\"vnicornMeme\">\r\n                  <img\r\n                    src={props.data.randomImg}\r\n                    className=\"img-fluid img-thumbnail\"\r\n                    alt=\"\" width=\"100%\"\r\n                  />\r\n                  <h2 className=\"topText\">{props.data.topText}</h2>\r\n                  <h2 className=\"bottomText\">{props.data.bottomText}</h2>\r\n                  <i className=\"authorText\">\r\n                    {props.data.authorText.length > 0 && (\r\n                      <> @ {props.data.authorText} </>\r\n                    )}\r\n                  </i>\r\n                </div>\r\n        </div>\r\n\r\n        <div className=\"col-lg-4 p-2 d-flex flex-column position-static\">\r\n        <form>\r\n                  <div className=\"shadow-lg p-3 mb-3 bg-white rounded\">\r\n                    <p className=\"text-muted\">Add image</p>\r\n                    <button\r\n                      type=\"submit\"\r\n                      name=\"generateImage\"\r\n                      onClick={props.handleRandom}\r\n                      class=\"btn btn-info btn-md btn-block\"\r\n                    >\r\n                      {\"Generate random web image\"}\r\n                    </button>\r\n                    <br />\r\n                    <p className=\"text-center small\">OR</p>\r\n                    <div className=\"input-group\">\r\n                      <div className=\"custom-file\">\r\n                        <input\r\n                          onChange={props.handleUpload}\r\n                          type=\"file\"\r\n                          className=\"custom-file-input\"\r\n                          id=\"inputGroupFile04\"\r\n                          aria-describedby=\"inputGroupFileAddon04\"\r\n                          accept=\"image/x-png,image/gif,image/jpeg\"\r\n                        />\r\n                        <label\r\n                          className=\"custom-file-label border-info\"\r\n                          for=\"inputGroupFile04\"\r\n                        >\r\n                          Choose local image\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"shadow-lg p-3 mb-3 bg-white rounded\">\r\n                    <p className=\"text-muted\">Add details</p>\r\n                    <input\r\n                      className=\"form-control border-info mb-2\"\r\n                      type=\"text\"\r\n                      name=\"topText\"\r\n                      placeholder=\"Top phrase\"\r\n                      value={props.data.topText}\r\n                      onChange={props.handleChange}\r\n                    />\r\n                    <input\r\n                      className=\"form-control border-info\"\r\n                      type=\"text\"\r\n                      name=\"bottomText\"\r\n                      placeholder=\"Bottom phrase\"\r\n                      value={props.data.bottomText}\r\n                      onChange={props.handleChange}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"shadow-lg p-3 mb-3 bg-white rounded\">\r\n                    <p className=\"text-muted\">Add author</p>\r\n                    <input\r\n                      className=\"form-control border-info\"\r\n                      type=\"text\"\r\n                      name=\"authorText\"\r\n                      placeholder=\"Author info\"\r\n                      value={props.data.authorText}\r\n                      onChange={props.handleChange}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"shadow-lg p-3 mb-3 bg-white rounded text-center\">\r\n                    <div\r\n                      className=\"btn-group btn-group-md \"\r\n                      role=\"group\"\r\n                      aria-label=\"Download type\"\r\n                    >\r\n                      <button\r\n                        type=\"button\"\r\n                        s\r\n                        className=\"btn btn-outline-info\"\r\n                        onClick={props.handlePng}\r\n                      >\r\n                        Download PNG\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-outline-info\"\r\n                        onClick={props.handleJpeg}\r\n                      >\r\n                        Download JPEG\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n        </div>\r\n       \r\n      </div>\r\n    </div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemeDisplay;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo\r\n    });\r\n    // You can also log error messages to an error reporting service here\r\n    return <h1>Something went wrong.</h1>;\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\nimport MemeDisplay from \"./MemeDisplay\";\r\nimport htmlToImage from \"html-to-image\";\r\nimport download from \"downloadjs\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\n\r\nclass MemeGenerator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      authorText: \"\",\r\n      randomImg: \"https://i.imgflip.com/8k0sa.jpg\",\r\n      allMemeImgs: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        const { memes } = response.data;\r\n        this.setState({ allMemeImgs: memes });\r\n      });\r\n  }\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  //Add local image\r\n  handleUpload = event => {\r\n    event.preventDefault();\r\n    const { files } = event.target;\r\n    const uploadFile = URL.createObjectURL(files[0]);\r\n    this.setState({\r\n      randomImg: uploadFile\r\n    });\r\n  };\r\n\r\n  //Add random image\r\n  handleRandom = event => {\r\n    event.preventDefault();\r\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\r\n    const randMemeImg = this.state.allMemeImgs[randNum].url;\r\n    this.setState({ randomImg: randMemeImg });\r\n  };\r\n\r\n  //Download PNG image\r\n  handlePng = () => {\r\n    htmlToImage\r\n      .toPng(document.getElementById(\"my-meme\"))\r\n      .then(function(dataUrl) {\r\n        download(dataUrl, \"my-meme.png\");\r\n      });\r\n  };\r\n\r\n  // Download JPEG image\r\n  handleJpeg = () => {\r\n    htmlToImage\r\n      .toJpeg(document.getElementById(\"my-meme\"), { quality: 0.95 })\r\n      .then(function(dataUrl) {\r\n        var link = document.createElement(\"a\");\r\n        link.download = \"my-meme.jpeg\";\r\n        link.href = dataUrl;\r\n        link.click();\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ErrorBoundary>\r\n        <MemeDisplay\r\n          handleChange={this.handleChange}\r\n          handleRandom={this.handleRandom}\r\n          handlePng={this.handlePng}\r\n          handleJpeg={this.handleJpeg}\r\n          handleUpload={this.handleUpload}\r\n          data={this.state}\r\n        />\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeGenerator;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n\r\n    <footer>\r\n  <div class=\"footer-copyright text-center py-3\">© 2019 Copyright:\r\n    <a href=\"http://innowhat.com/\"> innowhat.com</a>\r\n  </div>\r\n\r\n    </footer>\r\n  \r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Header from \"./memeComponents/Header\";\r\nimport MemeGenerator from \"./memeComponents/MemeGenerator\";\r\nimport Footer from \"./memeComponents/Footer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Header />\r\n      <MemeGenerator />\r\n      <Footer />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
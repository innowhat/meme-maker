{"version":3,"sources":["memeComponents/Header.js","memeComponents/Footer.js","memeComponents/MemeDisplay.js","memeComponents/ErrorBoundary.js","memeComponents/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","class","src","alt","width","height","Footer","href","MemeDisplay","props","id","data","randomImg","topText","bottomText","authorText","length","type","name","onClick","handleRandom","onChange","handleUpload","aria-describedby","accept","for","placeholder","value","handleChange","role","aria-label","s","handlePng","handleJpeg","ErrorBoundary","state","hasError","error","errorInfo","this","setState","children","React","Component","MemeGenerator","event","target","preventDefault","files","uploadFile","URL","createObjectURL","randNum","Math","floor","random","allMemeImgs","randMemeImg","url","htmlToImage","toPng","document","getElementById","then","dataUrl","download","toJpeg","quality","link","createElement","click","fetch","response","json","memes","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2652a0fc.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header>\n      <div className=\"container\">\n\n      <div class=\"col py-2 text-center\">\n    <img class=\"d-block mx-auto\" src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"\" width=\"50\" height=\"50\" /> \n    <h2 className=\"text-info\">Meme Maker</h2>\n    <p class=\"lead\">Making the World lol again</p>\n  </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n\n    <footer>\n      <div class=\"footer-copyright text-center py-3\">Â© 2020 Copyright:\n    <a href=\"http://innowhat.com/\"> innowhat.com</a> <br />\n        <a href=\"https://github.com/innowhat/meme-maker\"> Source code</a>\n      </div>\n\n    </footer>\n\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Header from './Header';\nimport Footer from './Footer';\nfunction MemeDisplay(props) {\n  return (\n    <div className=\"jumbotron bg-info\">\n      <div className=\"container\">\n        <div className=\"row \">\n          <div className=\"col-md-12\">\n            <div className=\"row border overflow-hidden mb-4\">\n              <div className=\"col-lg-8 p-2 d-lg-block\">\n                <div id=\"my-meme\" className=\"vnicornMeme\">\n                  <img\n                    src={props.data.randomImg}\n                    className=\"img-fluid img-thumbnail\"\n                    alt=\"\" width=\"100%\"\n                  />\n                  <h2 className=\"topText\">{props.data.topText}</h2>\n                  <h2 className=\"bottomText\">{props.data.bottomText}</h2>\n                  <i className=\"authorText\">\n                    {props.data.authorText.length > 0 && (\n                      <> @ {props.data.authorText} </>\n                    )}\n                  </i>\n                </div>\n              </div>\n              <div className=\"col-lg-4 p-2 d-flex flex-column position-static\">\n                <div className=\"shadow-lg p-3 mb-3 bg-white rounded\">\n                  <Header />\n                </div>\n                <form>\n                  <div className=\"shadow-lg p-3 mb-3 bg-white rounded\">\n                    <p className=\"text-muted\">Add image</p>\n                    <button\n                      type=\"submit\"\n                      name=\"generateImage\"\n                      onClick={props.handleRandom}\n                      class=\"btn btn-info btn-md btn-block\"\n                    >\n                      {\"Generate random web image\"}\n                    </button>\n                    <br />\n                    <p className=\"text-center small\">OR</p>\n                    <div className=\"input-group\">\n                      <div className=\"custom-file\">\n                        <input\n                          onChange={props.handleUpload}\n                          type=\"file\"\n                          className=\"custom-file-input\"\n                          id=\"inputGroupFile04\"\n                          aria-describedby=\"inputGroupFileAddon04\"\n                          accept=\"image/x-png,image/gif,image/jpeg\"\n                        />\n                        <label\n                          className=\"custom-file-label border-info\"\n                          for=\"inputGroupFile04\"\n                        >\n                          Choose local image\n                        </label>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"shadow-lg p-3 mb-3 bg-white rounded\">\n                    <p className=\"text-muted\">Add details</p>\n                    <input\n                      className=\"form-control border-info mb-2\"\n                      type=\"text\"\n                      name=\"topText\"\n                      placeholder=\"Top phrase\"\n                      value={props.data.topText}\n                      onChange={props.handleChange}\n                    />\n                    <input\n                      className=\"form-control border-info\"\n                      type=\"text\"\n                      name=\"bottomText\"\n                      placeholder=\"Bottom phrase\"\n                      value={props.data.bottomText}\n                      onChange={props.handleChange}\n                    />\n                    <input\n                      className=\"form-control border-info\"\n                      type=\"text\"\n                      name=\"authorText\"\n                      placeholder=\"Author info\"\n                      value={props.data.authorText}\n                      onChange={props.handleChange}\n                    />\n                  </div>\n\n                  <div className=\"shadow-lg p-3 mb-3 bg-white rounded text-center\">\n                    <div\n                      className=\"btn-group btn-group-md \"\n                      role=\"group\"\n                      aria-label=\"Download type\"\n                    >\n                      <button\n                        type=\"button\"\n                        s\n                        className=\"btn btn-outline-info\"\n                        onClick={props.handlePng}\n                      >\n                        Download PNG\n                      </button>\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-outline-info\"\n                        onClick={props.handleJpeg}\n                      >\n                        Download JPEG\n                      </button>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </div>\n            <Footer />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MemeDisplay;\n","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n    // You can also log error messages to an error reporting service here\n    return <h1>Something went wrong.</h1>;\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport MemeDisplay from \"./MemeDisplay\";\nimport htmlToImage from \"html-to-image\";\nimport download from \"downloadjs\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nclass MemeGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      authorText: \"\",\n      randomImg: \"https://i.imgflip.com/8k0sa.jpg\",\n      allMemeImgs: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(response => response.json())\n      .then(response => {\n        const { memes } = response.data;\n        this.setState({ allMemeImgs: memes });\n      });\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  //Add local image\n  handleUpload = event => {\n    event.preventDefault();\n    const { files } = event.target;\n    const uploadFile = URL.createObjectURL(files[0]);\n    this.setState({\n      randomImg: uploadFile\n    });\n  };\n\n  //Add random image\n  handleRandom = event => {\n    event.preventDefault();\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    const randMemeImg = this.state.allMemeImgs[randNum].url;\n    this.setState({ randomImg: randMemeImg });\n  };\n\n  //Download PNG image\n  handlePng = () => {\n    htmlToImage\n      .toPng(document.getElementById(\"my-meme\"))\n      .then(function (dataUrl) {\n        download(dataUrl, \"my-meme.png\");\n      });\n  };\n\n  // Download JPEG image\n  handleJpeg = () => {\n    htmlToImage\n      .toJpeg(document.getElementById(\"my-meme\"), { quality: 0.95 })\n      .then(function (dataUrl) {\n        var link = document.createElement(\"a\");\n        link.download = \"my-meme.jpeg\";\n        link.href = dataUrl;\n        link.click();\n      });\n  };\n\n  render() {\n    return (\n      <ErrorBoundary>\n        <MemeDisplay\n          handleChange={this.handleChange}\n          handleRandom={this.handleRandom}\n          handlePng={this.handlePng}\n          handleJpeg={this.handleJpeg}\n          handleUpload={this.handleUpload}\n          data={this.state}\n        />\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default MemeGenerator;\n","import React from \"react\";\nimport MemeGenerator from \"./memeComponents/MemeGenerator\";\n\nfunction App() {\n  return <MemeGenerator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}